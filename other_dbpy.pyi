from typing import Tuple, Optional

class PyKvDbOperaObject:
    def __init__(self) -> None: ...
    def clone(self) -> 'PyKvDbOperaObject': ...

class List:
    def __init__(self, db: PyKvDbOperaObject, name: str) -> None: ...
    # def open(self, db: PyKvDbOperaObject, name: str) -> 'List': ...
    def append(self, value: bytes) -> bool: ...
    def access(self, index: int) -> Optional[bytes]: ...
    def overwrite(self, index: int, value: bytes) -> bool: ...
    def delete(self, index: int) -> bool: ...
    def len(self) -> Optional[int]: ...

class Hashtable:
    def __init__(self, db: PyKvDbOperaObject, name: str) -> None: ...
    # def open(self, db: PyKvDbOperaObject, name: str) -> 'Hashtable': ...
    def insert(self, key: str, value: bytes) -> bool: ...
    def get(self, key: str) -> Optional[bytes]: ...
    def delete(self, key: str) -> bool: ...
    def to_tuple_list(self, number_of_entries: Optional[int]) -> List[Tuple[str, bytes]]: ...

def open_db(path: str) -> PyKvDbOperaObject: ...
def archive_new(db: PyKvDbOperaObject, name: str) -> Archive: ...
def archive_open(db: PyKvDbOperaObject, name: str) -> Archive: ...

class Archive:
    def __init__(self) -> None: ...
    def new(self, py_index_list: List[Tuple[str, List[str]]]) -> EAR: ...
    def open(self, py_index_list: List[Tuple[str, List[str]]]) -> EAR: ...

class EAR:
    def access(self) -> Optional[bytes]: ...
    def delete(self) -> Optional[bool]: ...
    def overwrite(self, data: bytes) -> Optional[bool]: ...